package Algoritm.Algoritm.OperationOnSet.ГенерацияРазмещений.СПовторениями;
//https://www.youtube.com/watch?v=CCecE9PAjgM&list=PLtNPgSbW9TX7acrQa2LeBAMGxO5WRAVsz&index=29

import java.util.Arrays;

/**
 * Сложность по времени в наихудшем случае O(nk) - степенная
 * <p>
 * Затраты памяти O(n+k) - линейная
 * <p>
 * <p>
 * 1) Создаем последовательность длинной k. Заполняем ее значениями равными нулю (в
 * дальнейшем предполагаем что индексация в последовательности начинается с нуля).
 * Возвращаем первые k — элементов. Это первое размещение. Переходим к 2.
 * <p>
 * 2) Начиная с конца последовательности ищем элемент значение которого меньше чем n-1.
 * a) Такой элемент найден. Увеличиваем его значение на единицу. Устанавливаем значения для
 * всех элементов которые стоят правее равными 0. Возвращаем первые k элементов.
 * Переходим к 2.
 * b) Такой элемент не найден. Заканчиваем алгоритм.
 * <p>
 * С повторениями, значит один элемент может использоваться несколько раз.
 * OUTPUT: permutationNOfK(4, 3);
 * [0, 0, 0]
 * [0, 0, 1]
 * [0, 0, 2]
 * [0, 0, 3]
 * [0, 1, 0]
 * [0, 1, 1]
 * [0, 1, 2]
 * [0, 1, 3]
 * [0, 2, 0]
 * [0, 2, 1]
 * [0, 2, 2]
 * [0, 2, 3]
 * [0, 3, 0]
 * [0, 3, 1]
 * [0, 3, 2]
 * [0, 3, 3]
 * [1, 0, 0]
 * [1, 0, 1]
 * [1, 0, 2]
 * [1, 0, 3]
 * [1, 1, 0]
 * [1, 1, 1]
 * [1, 1, 2]
 * [1, 1, 3]
 * [1, 2, 0]
 * [1, 2, 1]
 * [1, 2, 2]
 * [1, 2, 3]
 * [1, 3, 0]
 * [1, 3, 1]
 * [1, 3, 2]
 * [1, 3, 3]
 * [2, 0, 0]
 * [2, 0, 1]
 * [2, 0, 2]
 * [2, 0, 3]
 * [2, 1, 0]
 * [2, 1, 1]
 * [2, 1, 2]
 * [2, 1, 3]
 * [2, 2, 0]
 * [2, 2, 1]
 * [2, 2, 2]
 * [2, 2, 3]
 * [2, 3, 0]
 * [2, 3, 1]
 * [2, 3, 2]
 * [2, 3, 3]
 * [3, 0, 0]
 * [3, 0, 1]
 * [3, 0, 2]
 * [3, 0, 3]
 * [3, 1, 0]
 * [3, 1, 1]
 * [3, 1, 2]
 * [3, 1, 3]
 * [3, 2, 0]
 * [3, 2, 1]
 * [3, 2, 2]
 * [3, 2, 3]
 * [3, 3, 0]
 * [3, 3, 1]
 * [3, 3, 2]
 * [3, 3, 3]
 */


public class GenerationReplacementWithRepeat {
    public static void main(String[] args) {

        permutationNOfK(4, 3);

    }

    public static void permutationNOfK(int n, int k) {
        int[] perm = new int[k];
        for (; ; ) {
            System.out.println(Arrays.toString(perm));
            int i = k - 1;
            for (; i >= 0; i--) {
                if (perm[i] < n - 1) {
                    break;
                }
            }
            if (i < 0) {
                break;
            }
            perm[i] += 1;
            i = i + 1;
            for (; i < k; ) {
                perm[i] = 0;
                i += 1;
            }
        }
    }

}






